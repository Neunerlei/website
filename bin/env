#!/usr/bin/env bash
# This script was generated by bashly 1.1.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
env_usage() {
  if [[ -n $long_usage ]]; then
    printf "env - Environment Control application\n"
    echo

  else
    printf "env - Environment Control application\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  env COMMAND\n"
  printf "  env [COMMAND] --help | -h\n"
  printf "  env --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   start a node container and build the selected resources\n" "build"
  printf "  %s   start a node container and start watching the selected resources\n" "dev  "
  printf "  %s   start a node container and open an ssh terminal in it\n" "ssh  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
env_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "env build - start a node container and build the selected resources\n"
    echo

  else
    printf "env build - start a node container and build the selected resources\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  env build\n"
  printf "  env build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
env_dev_usage() {
  if [[ -n $long_usage ]]; then
    printf "env dev - start a node container and start watching the selected resources\n"
    echo

  else
    printf "env dev - start a node container and start watching the selected resources\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  env dev\n"
  printf "  env dev --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
env_ssh_usage() {
  if [[ -n $long_usage ]]; then
    printf "env ssh - start a node container and open an ssh terminal in it\n"
    echo

  else
    printf "env ssh - start a node container and open an ssh terminal in it\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  env ssh\n"
  printf "  env ssh --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# _env/src/lib/dockerUtil.sh
determineDockerExecutable(){
  local dockerExecutable=$(which docker)
  if [[ ${dockerExecutable} ]]; then
    echo ${dockerExecutable}
    return
  fi
  local podmanExecutable=$(which podman)
  if [[ ${podmanExecutable} ]]; then
    echo ${podmanExecutable}
    return
  fi
  echo "Sorry, but I did not find docker or podman on your system" >&2
  exit 1
}

# _env/src/lib/util.sh
# Loads the script environment file or dies if it does not exist
loadEnvFile(){
  ENV_FILE=${ENV_FILE:-"${PROJECT_ROOT_DIR}/.env"}

  if [ ! -f ${ENV_FILE} ]; then
    echo "Missing ${ENV_FILE} file! Please copy .env.tpl and add the secrets to it before continuing!";
    exit 1;
  fi

  source ${ENV_FILE}

  # Load the infrastructure env file as well, if it exists
  ENV_FILE_INFRASTRUCTURE=${ENV_FILE_INFRASTRUCTURE:-"${ENV_FILE}.infrastructure"}

  if [ -f ${ENV_FILE_INFRASTRUCTURE} ]; then
  	source ${ENV_FILE_INFRASTRUCTURE}
  fi

  # We have to check if there is a *.local override version for the env file now...
  ENV_FILE_LOCAL=${ENV_FILE_LOCAL:-"${ENV_FILE}.local"}

  if [ -f ${ENV_FILE_LOCAL} ]; then
  	source ${ENV_FILE_LOCAL}
  fi
}

# Asserts that the provided command exist, or kills the script
assertCommandExists(){
  MESSAGE=${2:-"Error: the required executable ${1} does not exist"}
  if ! [ -x "$(command -v $1)" ]; then
    echo "${MESSAGE}" >&2
    exit 1
  fi
}

# Asserts that there is currently an open vpn connection, by trying to access the spots staging system
assertVpnConnection(){
  RESPONSE=$( curl -o /dev/null -Isw '%{http_code}\n' https://spots.staging.roadsurfer.com/fpm-ping )
  if [[ ${RESPONSE} != "200" ]]; then
    echo "Can't connect to the spots staging system, is your VPN running?"
    exit 1
  fi
}

# Asks the user for confirmation and assumes yes should be the default answer
confirmDefaultYes(){
  QUESTION=${1:-"Are you sure?"}
  read -r -p "${QUESTION} [Y/n] " RESPONSE
  RESPONSE=${RESPONSE,,}

  if [[ "${RESPONSE}" =~ ^(yes|y)$ ]] || [[ ${RESPONSE} == "" ]]; then
    return
  fi

  false
}

# Asks the user for confirmation and assumes no should be the default answer
confirmDefaultNo(){
  QUESTION=${1:-"Are you sure?"}
  read -r -p "${QUESTION} [y/N] " RESPONSE
  RESPONSE=${RESPONSE,,}

  if [[ "${RESPONSE}" =~ ^(no|n)$ ]] || [[ ${RESPONSE} == "" ]]; then
  	false
    return
  fi
}

# Checks the last exit code and kills the script if it is bigger than 0
checkLastExitCodeOrDie(){
  CODE=${1:-$?}
  MESSAGE=${2:-"There was an issue with running a task"}

  if [ ${CODE} -ne 0 ]
  then
    echo "${MESSAGE}" >&2
    exit 1
  fi
}

# Tries to find an open port
findOpenLocalPort(){
  read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
  while :
  do
    LOCAL_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
    ss -lpn | grep -q ":${LOCAL_PORT} " || break
  done
  echo $LOCAL_PORT
}

determineHostType() {
  OS='unsupported';
  case "$OSTYPE" in
    #darwin*)  OS="OSX" ;;
    linux*)   OS="LINUX" ;;
    msys*)    OS="WINDOWS" ;;
    cygwin*)  OS="WINDOWS" ;;
  esac

  echo $OS
  return
}

determineOsPlatform() {
  if [[ $OS_TYPE == 'LINUX' ]]; then
    echo $(dpkg --print-architecture)
    return
  fi

  if [[ $OS_TYPE == 'WINDOWS' ]]; then
    echo %PROCESSOR_ARCHITECTURE%
    return
  fi
}

isWslMachine() {
  if [[ $(grep Microsoft /proc/version) ]]; then
    return
  fi
  if [[ $(grep microsoft /proc/version) ]]; then
    return
  fi

  false
}

# :command.command_functions
# :command.function
env_build_command() {
  # _env/src/build_command.sh
  docker run --rm --interactive --tty \
    --volume "${PROJECT_ROOT_DIR}":/project \
    --user $(id -u):$(id -g) \
    --env YARN_CACHE_FOLDER=/project/.yarn-cache \
    --workdir "/project/${DIR}" \
    ${RESOURCE_CONTAINER_IMAGE} bash -c "yarn && yarn build"

}

# :command.function
env_dev_command() {
  # _env/src/dev_command.sh
  docker run --rm --interactive --tty \
    --volume "${PROJECT_ROOT_DIR}":/project \
    --user $(id -u):$(id -g) \
    --env YARN_CACHE_FOLDER=/project/.yarn-cache \
    --workdir "/project/${DIR}" \
    -p 8080:8080 \
    ${RESOURCE_CONTAINER_IMAGE} bash -c "yarn && yarn dev"

}

# :command.function
env_ssh_command() {
  # _env/src/ssh_command.sh
  $DOCKER_EXECUTABLE run --rm --interactive --tty \
    --volume "${PROJECT_ROOT_DIR}":/project \
    --user $(id -u):$(id -g) \
    --env YARN_CACHE_FOLDER=/project/.yarn-cache \
    --workdir "/project" \
    ${RESOURCE_CONTAINER_IMAGE} bash

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        env_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    build)
      action="build"
      shift
      env_build_parse_requirements "$@"
      shift $#
      ;;

    dev)
      action="dev"
      shift
      env_dev_parse_requirements "$@"
      shift $#
      ;;

    ssh)
      action="ssh"
      shift
      env_ssh_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      env_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
env_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        env_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
env_dev_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        env_dev_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="dev"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
env_ssh_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        env_ssh_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="ssh"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

  # _env/src/initialize.sh

  PROJECT_ROOT_DIR=$(realpath ./${BASH_SOURCE%/*}/..)

  loadEnvFile

  OS_TYPE=$(determineHostType)

  if [[ $OS_TYPE == 'unsupported' ]]; then
    echo 'Sorry, but we currently don''t support your operating system!'
    exit 1
  fi

  OS_PLATFORM=$(determineOsPlatform)

  DOCKER_EXECUTABLE=$(determineDockerExecutable)

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "build") env_build_command ;;
    "dev") env_dev_command ;;
    "ssh") env_ssh_command ;;
  esac
}

initialize
run "$@"
